{"ast":null,"code":"var _jsxFileName = \"/Users/dean/Documents/source/OMS/OMS.Web/React/client-app/src/LiveOrdersComponent.js\",\n  _s = $RefreshSig$();\n// OrdersComponent.js\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LiveOrdersComponent = () => {\n  _s();\n  const [orders, setOrders] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const userInfo = {\n      userId: 1,\n      password: \"userPassword\",\n      // Note: Be cautious with sensitive information\n      groupNum: 100\n    };\n    const fetchOrders = () => {\n      fetch('/api/data/get-live-orders', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userInfo)\n      }).then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.json();\n      }).then(data => setOrders(data)).catch(error => console.error('Error fetching live orders:', error));\n    };\n\n    // Initial fetch\n    fetchOrders();\n\n    // Set up polling\n    const intervalId = setInterval(fetchOrders, 5000); // Adjust polling interval as needed (e.g., 5000 ms for 5 seconds)\n\n    // Clean up\n    return () => clearInterval(intervalId);\n  }, []);\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading orders...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error fetching orders: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Orders\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Live orders are displayed here.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: orders.map(order => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"User: \", order.userID, \", Group \", order.userGroup, \", Order ID: \", order.orderManagerID, \", Price \", order.orderPX, \", Quantity: \", order.quantity]\n      }, order.liveOrderID, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(LiveOrdersComponent, \"6dbvw0Ef/CxExY872coRqwW6h8M=\");\n_c = LiveOrdersComponent;\nexport default LiveOrdersComponent;\nvar _c;\n$RefreshReg$(_c, \"LiveOrdersComponent\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","LiveOrdersComponent","_s","orders","setOrders","isLoading","setIsLoading","error","setError","userInfo","userId","password","groupNum","fetchOrders","fetch","method","headers","body","JSON","stringify","then","response","ok","Error","json","data","catch","console","intervalId","setInterval","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","map","order","userID","userGroup","orderManagerID","orderPX","quantity","liveOrderID","_c","$RefreshReg$"],"sources":["/Users/dean/Documents/source/OMS/OMS.Web/React/client-app/src/LiveOrdersComponent.js"],"sourcesContent":["// OrdersComponent.js\n\nimport React, { useState, useEffect } from 'react';\n\nconst LiveOrdersComponent = () => {\n  const [orders, setOrders] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const userInfo = {\n      userId: 1,\n      password: \"userPassword\", // Note: Be cautious with sensitive information\n      groupNum: 100\n    };\n  \n    const fetchOrders = () => {\n      fetch('/api/data/get-live-orders', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userInfo)\n      })\n      .then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.json();\n      })\n      .then(data => setOrders(data))\n      .catch(error => console.error('Error fetching live orders:', error));\n    };\n  \n    // Initial fetch\n    fetchOrders();\n  \n    // Set up polling\n    const intervalId = setInterval(fetchOrders, 5000); // Adjust polling interval as needed (e.g., 5000 ms for 5 seconds)\n  \n    // Clean up\n    return () => clearInterval(intervalId);\n  }, []); \n  \n\n  if (isLoading) return <div>Loading orders...</div>;\n  if (error) return <div>Error fetching orders: {error}</div>;\n\n  return (\n    <div>\n      <h2>Orders</h2>\n      <p>Live orders are displayed here.</p>\n      <ul>\n        {orders.map(order => (\n          <li key={order.liveOrderID}>\n            User: {order.userID}, Group {order.userGroup}, Order ID: {order.orderManagerID}, Price {order.orderPX}, Quantity: {order.quantity}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default LiveOrdersComponent;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}